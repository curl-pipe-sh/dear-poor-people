#!/usr/bin/env sh
# poorsocat â€” minimal interactive TTY bridge (like socat)
# description: minimal interactive TTY bridge (like socat)
# version: <GIT_COMMIT_SHA>
# icon: mdi:transit-connection-variant

set -eu

# Global variables
SCRIPT_NAME="poorsocat"
DEVICE=""
BAUD="115200"
READER_PID=""

# Source echo utilities - this line gets replaced during templating
# shellcheck disable=SC1091  # File is included via templating
. lib/echo.sh # <TEMPLATE>

usage() {
  cat <<USAGE >&2
Usage: ${SCRIPT_NAME} [--debug] [--trace] DEVICE [BAUD]

A minimal interactive TTY bridge for serial communication.

Arguments:
  DEVICE    Serial device (e.g., /dev/ttyUSB0, /dev/ttyACM0)
  BAUD      Baud rate (default: 115200)

Options:
  --debug          Enable debug output
  --trace          Enable shell tracing (set -x)
  -h, --help       Show this help message

Examples:
  ${SCRIPT_NAME} /dev/ttyUSB0           # Connect to USB serial at 115200 baud
  ${SCRIPT_NAME} /dev/ttyACM0 9600      # Connect to Arduino at 9600 baud
  ${SCRIPT_NAME} /dev/ttyS0 38400       # Connect to serial port at 38400 baud

Note: You may need appropriate permissions to access serial devices.
      Try adding your user to the 'dialout' group: sudo usermod -a -G dialout \$USER
USAGE
}

# Configure serial TTY settings
configure_tty() {
  DEVICE_ARG="$1"
  BAUD_ARG="$2"

  # Configure TTY (ignore errors if unsupported)
  stty -F "$DEVICE_ARG" "$BAUD_ARG" -echo -icanon 2>/dev/null || \
  stty "$BAUD_ARG" -echo -icanon 2>/dev/null < "$DEVICE_ARG" || true
}

# Start background reader process
start_reader() {
  DEVICE_ARG="$1"

  # Start background reader
  cat < "$DEVICE_ARG" &
  READER_PID=$!
}

# Cleanup function for signal handling
cleanup() {
  if [ -n "$READER_PID" ]
  then
    kill "$READER_PID" 2>/dev/null || true
  fi
}

# Main communication loop
communication_loop() {
  DEVICE_ARG="$1"

  # Main loop: read from stdin, write to device
  while IFS= read -r LINE
  do
    # send line with CR
    printf '%s\r' "$LINE" > "$DEVICE_ARG"
  done
}

main() {
  # Early return for sourcing support
  if [ -n "${SOURCED:-}" ]
  then
    return 0
  fi

  # Parse arguments
  while [ $# -gt 0 ]
  do
    case "$1" in
      --debug)
        DEBUG=1
        export DEBUG  # Export for use by echo.sh functions
        shift
        ;;
      --trace)
        set -x
        shift
        ;;
      -h|--help)
        usage
        return 0
        ;;
      -*)
        echo_error "Unknown option: $1"
        usage
        return 2
        ;;
      *)
        if [ -z "$DEVICE" ]
        then
          DEVICE="$1"
        elif [ -z "${BAUD_SET:-}" ]
        then
          BAUD="$1"
          BAUD_SET=1
        else
          echo_error "Too many arguments"
          usage
          return 2
        fi
        shift
        ;;
    esac
  done

  # Validate required arguments
  if [ -z "$DEVICE" ]
  then
    echo_error "Error: DEVICE argument required"
    echo_error "Usage: ${SCRIPT_NAME} DEVICE [BAUD]"
    echo_error "A minimal interactive TTY bridge for serial communication."
    usage
    return 2
  fi

  # Set up signal handling
  trap cleanup EXIT INT TERM

  # Configure the TTY
  configure_tty "$DEVICE" "$BAUD"

  # Start background reader
  start_reader "$DEVICE"

  # Enter communication loop
  communication_loop "$DEVICE"
}

main "$@"
